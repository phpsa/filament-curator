function curator({statePath,types,initialSelection=null}){return{statePath,types,selected:null,files:[],nextPageUrl:null,isFetching:!1,async init(){await this.getFiles("/curator/media",initialSelection?.id),new IntersectionObserver(([e])=>{e.isIntersecting&&this.loadMoreFiles()},{rootMargin:"0px",threshold:[0]}).observe(this.$refs.loadMore),initialSelection&&this.setSelected(initialSelection.id)},getFiles:async function(url="/curator/media",selected=null){if(selected){let indicator=url.includes("?")?"&":"?";url=url+indicator+"media_id="+selected}this.isFetching=!0;let result=await(await fetch(url)).json();this.files=this.files?this.files.concat(result.data):result.data,this.nextPageUrl=result.next_page_url,this.isFetching=!1},loadMoreFiles:async function(){this.nextPageUrl&&(this.isFetching=!0,await this.getFiles(this.nextPageUrl,this.selected?.id),this.isFetching=!1)},searchFiles:async function(event){this.isFetching=!0;let result=await(await fetch("/curator/media/search?q="+event.target.value)).json();this.files=result.data,this.isFetching=!1},addNewFile:function(media=null){media&&(this.files=[...media,...this.files],this.$nextTick(()=>{this.setSelected(media[0].id)}))},removeFile:function(media=null){media&&(this.files=this.files.filter(obj=>obj.id!==media.id),this.selected=null)},setSelected:function(mediaId=null){!mediaId||this.selected&&this.selected.id===mediaId?this.selected=null:this.selected=this.files.find(obj=>obj.id===mediaId),this.$wire.setCurrentFile(this.selected)}}}export{curator as default};
